package main

func main() {

}
//Runtime: 70 ms, faster than 99.48% of Go online submissions for Design HashSet.
//Memory Usage: 8.3 MB, less than 86.91% of Go online submissions for Design HashSet.
var exists = struct{}{}

type MyHashSet struct {
	m map[int]struct{}
}

func Constructor() MyHashSet {
	return MyHashSet{make(map[int]struct{})}
}

func (this *MyHashSet) Add(key int) {
	this.m[key] = exists
}

func (this *MyHashSet) Remove(key int) {
	delete(this.m, key)
}

func (this *MyHashSet) Contains(key int) bool {
	_, c := this.m[key]
	return c
}

========================================
//Runtime: 184 ms, faster than 18.85% of Go online submissions for Design HashSet.
//Memory Usage: 34.1 MB, less than 5.23% of Go online submissions for Design HashSet.

type MyHashSet struct {
	h []bool
}

var arr = [10000001]int{}

func Constructor() MyHashSet {
	return MyHashSet{make([]bool, 10000001)}
}

func (this *MyHashSet) Add(key int) {
	this.h[key] = true
}

func (this *MyHashSet) Remove(key int) {
	this.h[key] = false
}

func (this *MyHashSet) Contains(key int) bool {
	return this.h[key]
}
